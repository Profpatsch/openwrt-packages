#!/bin/sh

#Enable/Disable auto-ipv6
[ "$(uci get autoipv6.olsr_node.enable)" == 1 ] || exit 0

. /etc/functions.sh

olsrd_clear_hna6() {
	uci delete 'olsrd.@Hna6[-1]'
	return 0
}

olsrd_find_hna6() {
	local cfg="$1"
	local netaddr="$2"
	config_get Netaddr $cfg netaddr
	if [ "$Netaddr" == "$netaddr" ] ; then
		neta="$count $neta"
	fi
	count=$((count+1))
	return 0
}

olsrd_search_hna6() {
	local cfg="$1"
	local found="0"
	config_get Netaddr $cfg netaddr
	for i in $hna6s ; do
		if [ "$Netaddr" == "$i" ] ; then
			found="1"
		fi
	done
	if [ "$found" == "0" ] ; then
		neta="$count $neta"
	fi
	count=$((count+1))
	return 0
}

net_find_iface() {
        local cfg="$1"
        case $cfg in
        	loopback) return 0 ;;
        	gvpn) return 0 ;;
        esac
        interfaces="$interfaces ""$cfg"
        return 0
}

#we need to check all gateways in hna table and see which one is the default gw by looking at the etx for each gw

local IPV6_GATEWAYS="$(wget -q -O - http://[::1]:2006/hna | grep '2000::/3' | cut -d "$(printf "\t")" -f 2)"

local DEFAULT_ETX="1000000" # Use 1000 * 1000 here, because later we remove the decimal point in the etx from routes info
for g in $IPV6_GATEWAYS; do
        local GW_ETX="$(wget -q -O - http://[::1]:2006/routes | grep ^${g} | awk '{ print $4 }'| sed 's/\.//')"
        if [ $GW_ETX -lt $DEFAULT_ETX ]; then
                DEFAULT_ETX="$GW_ETX"
                DEFAULT_GW="$g"
        fi
done

#expand gw address (fill :: with appropriate amount of zeros)
local colons="$(echo $DEFAULT_GW | grep -o ":" | wc -l)"
local tofill=$(( 8 - $colons ))
local filler=""

for i in `seq 1 $tofill`; do
	filler="0000:$filler"
done

IP6_SUFFIX=$(echo $DEFAULT_GW | sed "s/::/:$filler/" | cut -d ':' -f 1-4 )

[ -z "$IP6_SUFFIX" ] && logger -t auto-ipv6 "No ipv6 gateway found. Either there is no IPv6 Gateway reachable or i could not connect to the txtinfo plugin. Exiting." && exit 1
for i in $IP6_SUFFIX ; do
	case $i in
		fdca*) ;;
		*) IP6_SUFFIX=$i ;;
	esac
done

config_load network
local interfaces=""
config_foreach net_find_iface interface

local restart_dnsmasq=0
local restart_olsrd=0
local hna6s=""

for i in $(echo $interfaces) ; do
	[ "$(uci get network.$i.proto)" == "static" ] || continue
	DEV="$(uci -q -p/var/state get network.$i.ifname)"
	[ -z "$DEV" ]  && {
		logger -t auto-ipv6 "uci Device Not Found IP6_SUFFIX $IP6_SUFFIX interfaces $i DEV $DEV check your uci config"
		continue
	}
	grep -q "$DEV" /proc/net/dev || {
		logger -t auto-ipv6 "proc Device Not Found IP6_SUFFIX $IP6_SUFFIX interfaces $i DEV $DEV check your uci config"
		continue
	}
	IP6_UCI=$(uci get network.$i.ip6addr)
	if [ $(echo $IP6_UCI | grep -i fdca) ] ; then
		uci set network.$i.ip6addr_fdca="$IP6_UCI"
	fi
#	IP6_OLDSUFFIX="$(echo $IP6_UCI | cut -d ':' -f -3)"
	IP6_OLDSUFFIX="$(echo $IP6_UCI | cut -d ':' -f -4)"
	IP6_OLDUNIQ="$(echo $IP6_UCI | cut -d ':' -f 4)"

	[ "$IP6_SUFFIX" == "$IP6_OLDSUFFIX" ] && echo "no change detected" && exit
#	[ -z $IP6_OLDSUFFIX ] || {
#		[ "$IP6_SUFFIX" == "$IP6_OLDSUFFIX" ] && ifconfig "$DEV" | grep -q -e "$IP6_SUFFIX"".*1\/112" && {
#			hna6s="$IP6_OLDSUFFIX"":""$IP6_OLDUNIQ""::"" $hna6s"
#			continue
#		}
#	}
	#uci set "network.$i.ip6oldSUFFIX=$IP6_SUFFIX"
	# Uniq 4Bybte from urandom
	# IP6_UNIQ="$(head -n 1 /dev/urandom 2>/dev/null | md5sum | cut -b 1-4)"

	# Uniq 16 bit from last two octets of ipv4 address of this interface
	#local ipv4addr=$(uci -q -p/var/state get network.$i.ipaddr)
	#local o3=$(echo $ipv4addr | cut -d '.' -f 3)
	#local o4=$(echo $ipv4addr | cut -d '.' -f 4)
	#IP6_UNIQ="$(printf '%02x' $o3)$(printf '%02x' $o4)"

	# Uniq parts from mac / works with /112 netmasks
	local mac="$(ifconfig $DEV |grep HWaddr | awk '{ print $5 '})"
	local IP6_UNIQ="$(echo $mac | awk -F: '{ print $1$2":"$3$4":"$5$6 }')"
	echo "IP6_UNIQ $IP6_UNIQ"

#	case $IP6_UNIQ in 
#		000*) IP6_UNIQ=$(echo $IP6_UNIQ | cut -b 4) ;; 
#		00*) IP6_UNIQ=$(echo $IP6_UNIQ | cut -b 3-4) ;; 
#		0*) IP6_UNIQ=$(echo $IP6_UNIQ | cut -b 2-4) ;;
#	esac

	#uci set "network.$i.ip6olduniq=$IP6_UNIQ"
	#uci commit network

#	[ -z $IP6_OLDSUFFIX ] || {
#		ifconfig "$DEV" del "$IP6_OLDSUFFIX"":""$IP6_OLDUNIQ""::1/64"
#	}

	for j in $(ifconfig $DEV | grep Scope:Global | cut -d ' ' -f 13 ) ; do
		ifconfig "$DEV" del "$j"
	done

	sysctl -w "net.ipv6.conf.$DEV.autoconf=0"
	sysctl -w "net.ipv6.conf.$DEV.accept_redirects=0"
	sysctl -w "net.ipv6.conf.$DEV.accept_ra=0"
	sysctl -w "net.ipv6.conf.$DEV.accept_ra_defrtr=0"
	sysctl -w "net.ipv6.conf.$DEV.accept_ra_pinfo=0"
	sysctl -w "net.ipv6.conf.$DEV.accept_source_route=0"

#	IP6_ADDRESS="${IP6_SUFFIX}:${IP6_UNIQ}::${COUNTER}:1/112"
	IP6_ADDRESS="${IP6_SUFFIX}:${IP6_UNIQ}:1/112"
	echo "IP_ADDRESS for interface $DEV is $IP6_ADDRESS"
	ifconfig "$DEV" add $IP6_ADDRESS
	uci -P /var/state set network.$i.ip6addr="$IP6_ADDRESS"
	uci set network.$i.ip6addr="$IP6_ADDRESS"
	uci commit network
	hna6s="$IP6_SUFFIX"":""$IP6_UNIQ""::"" $hna6s"
	# Write /etc/dnsmasq.conf with our suffixes
	sed -i "/${IP6_OLDSUFFIX}:${IP6_UNIQ}/d" /etc/dnsmasq.conf
#	echo "dhcp-range=$DEV,$IP6_SUFFIX:$IP6_UNIQ::$COUNTER:100,$IP6_SUFFIX:$IP6_UNIQ::$COUNTER:100,112,300" >> /etc/dnsmasq.conf
	echo "dhcp-range=$DEV,$IP6_SUFFIX:$IP6_UNIQ:100,$IP6_SUFFIX:$IP6_UNIQ:1000,112,300" >> /etc/dnsmasq.conf
	restart_dnsmasq=1
#	COUNTER="$(($COUNTER + 1))"
done

if [ "6and4" == "$(uci get olsrd.@olsrd[0].IpVersion)" ] ; then
	config_load olsrd
	for i in $hna6s ; do
		local neta=""
		local count=0
		config_foreach olsrd_find_hna6 Hna6 $i
		if [ "$neta" == "" ] ; then
			uci add olsrd Hna6
			uci set "olsrd.@Hna6[-1].prefix=112"
			uci set "olsrd.@Hna6[-1].netaddr=""$i"
			uci commit olsrd
			restart_olsrd=1
		fi
	done

	local neta=""
	local count=0
	config_foreach olsrd_search_hna6 Hna6
	for i in $neta ; do
		uci delete "olsrd.@Hna6["$i"]"
		uci commit olsrd
		restart_olsrd=1
	done
fi

# clear all config variables here. else they will leak into the olsrd init script
config_clear


if [ $restart_dnsmasq -eq 1 ] ; then
	if ! [ -z "$(pidof dnsmasq)" ] ; then
		logger -t auto-ipv6 "Restarting dnsmasq..."
		/etc/init.d/dnsmasq restart
	fi
fi

if [ $restart_olsrd -eq 1 ] ; then
	if ! [ -z "$(pidof olsrd)" ] ; then
		logger -t auto-ipv6 "Restarting olsrd..."
		/etc/init.d/olsrd restart
	fi
fi

