#!/bin/sh /etc/rc.common
# Copyright (C) 2006 OpenWrt.org

START=98
boot() {
set -x

ff_adm_note="`nvram get ff_adm_note`"
fff2kamikaze="`echo "$ff_adm_note"|grep run_fff2kamikaze`"

if [ -z "$fff2kamikaze" ];then
        echo "NOT starting FFF-NVRAM to UCI conversion. run_fff2kamikaze is not set in ff_adm_note";exit
fi

# remove run_fff2kamikaze from ff_adm_note
nvram set ff_adm_note="`echo "$ff_adm_note"|sed -e 's/run_fff2kamikaze//g'`"
nvram commit

echo "### Starting FFF-NVRAM to UCI conversion ###"

# This is free software, licensed under the GNU General Public License v2.
# See http://www.gnu.de/documents/gpl-2.0.en.html for more information.

# author: soma
VERSION="0.0.1-3 / 08032009"

echo "### Migration Script from FFF to LUCI-Kamikaze, Version: $VERSION ###"

cp -r /etc/config/ /etc/config.orig

#----------#
# passwort #
#----------#

passwd=`nvram get ff_pw`
#Altes Pass loeschen
sed -i "/^root*/d" /etc/passwd
if test -n "$passwd";then
	echo "root:$passwd:0:0:root:/root:/bin/ash" > /etc/passwd.tmp
	else 
	echo 'root:$1$kq6QGDmy$RuEbFh8UueMgkggCvfGBh.:0:0:root:/root:/bin/ash' > /etc/passwd.tmp
fi
cat /etc/passwd >> /etc/passwd.tmp
mv /etc/passwd.tmp /etc/passwd

#---------#
# contact #
#---------#

# if there is no /etc/config/freifunk create it

if [ ! -f /etc/config/freifunk ];then
	touch /etc/config/freifunk
	uci set freifunk.contact=public
fi

# convert newline to <br />
ff_adm_note=`nvram get ff_adm_note|sed ':a;N;$!ba;s/\n/<br \/>/g'`

uci batch <<EOF
set freifunk.contact='public'
set freifunk.contact.nickname='`nvram get ff_adm_nick`'
set freifunk.contact.name='`nvram get ff_adm_name`'
set freifunk.contact.mail='`nvram get ff_adm_mail`'
set freifunk.contact.phone='`nvram get ff_adm_tel`'
set freifunk.contact.location='`nvram get ff_adm_loc`'
set freifunk.contact.note="$ff_adm_note"
EOF

#--------#
# system #
#--------#

#currently unmigrated: ff_tz=MET-1MEST-2,M3.3.0,M10.5.0
latlon=`echo $(nvram get ff_adm_latlon) | tr ';' ' '`
latitude=`echo $latlon | cut -d ' ' -f 1`
longitude=`echo $latlon | cut -d ' ' -f 2`
uci batch <<EOF
set system.@system[0].hostname='`nvram get wan_hostname`'
set system.@system[0].latitude='$latitude'
set system.@system[0].longitude='$longitude'
EOF

#------#
# wifi #
#------#

## wifi ip settings
wifi_proto="`nvram get wifi_proto`"

# find out what wifi-device to use
export wifidevice=`uci get wireless.@wifi-iface[0].device`
if [ "$wifidevice" = "wifi0" ];then 
	export wifiifname="ath0"
        else export wifiifname="wifi0"
fi

uci delete network.wifi0

if [ "$wifi_proto" = "dhcp" ];then
uci batch << EOF
set network.wlan='interface'
set network.wlan.ifname="wifi0"
set network.wlan.proto='dhcp'
EOF
fi


if [ "$wifi_proto" = "static" ] || [ "$wifi_proto" = "olsr" ];then
uci batch << EOF
set network.wlan='interface'
set network.wlan.ifname="$wifiifname"
set network.wlan.proto='static'
set network.wlan.ipaddr='`nvram get wifi_ipaddr`'
set network.wlan.netmask='`nvram get wifi_netmask`'
EOF
	wifi_gateway="`nvram get wifi_gateway`"
	test -n "$wifi_gateway" && uci set network.wlan.gateway="$wifi_gateway"

	# set wan_dns here too, in case wan is disabled we have it here again
	wan_dns="`nvram get wan_dns`"
	test -n "$wan_dns" && for dns in $wan_dns;do uci set network.wlan.dns="$dns";done

	ff_mtu="`nvram get ff_mtu`"
	test -n "$ff_mtu" && uci set network.wlan.mtu="$ff_mtu"

	if [ "`nvram get wl0_mode`" = "sta" ] && [ ! "`nvram get wl0_infra`" = "1" ];then
		olsrifs="wlan"
	fi
fi

## wireless settings
### wifi device
if [ "$wifi_proto" = "disabled" ] || [ "`nvram get wl_gmode`" = "-1" ];then
	uci set wireless.$wifidevice.disabled='1'
else
	uci set wireless.$wifidevice.disabled='0'
fi

wl0_antdiv="`nvram get wl0_antdiv`"

case $wl0_antdiv in
  -1) uci set wireless.$wifidevice.diversity='1'; uci set wireless.$wifidevice.txantenna='0'; uci set wireless.$wifidevice.rxantenna='0' ;;
   0) uci set wireless.$wifidevice.diversity='0'; uci set wireless.$wifidevice.txantenna='1'; uci set wireless.$wifidevice.rxantenna='1' ;;
   1) uci set wireless.$wifidevice.diversity='0'; uci set wireless.$wifidevice.txantenna='2'; uci set wireless.$wifidevice.rxantenna='2' ;;
esac

if [ "$wifiifname" = "ath0" ];then
        countrycode=`nvram get ff_ath_param | tr ' ' '\n' |grep countrycode | sed -e 's/countrycode=//g'`
        outdoor=`nvram get ff_ath_param | tr ' ' '\n' |grep outdoor | sed -e 's/outdoor=//g'`
        test -n "$outdoor" && uci set wireless.$wifidevice.outdoor="$outdoor"
else
        countrycode="`nvram get wl0_country_code`"
fi
test -n "$countrycode" && uci set wireless.$wifidevice.country="$countrycode"

wl0_channel="`nvram get wl0_distance`"
test -n "$wl0_channel" && uci set wireless.$wifidevice.channel="$wl0_channel"

wl0_distance="`nvram get wl0_distance`"
test -n "$wl0_distance" && uci set wireless.$wifidevice.distance="$wl0_distance"

if [ "$wifidevice" = "wl0" ];then
	wl0_frameburst="`nvram get wl0_frameburst`"
	if [ "$wl0_frameburst" = "on" ]; then wl0_frameburst="1"; uci set wireless.$wifidevice.frameburst="$wl0_frameburst"; fi
fi

###wifi-interface
wifi_mode="`nvram get wl0_mode`"  # sta|ap
wifi_infra="`nvram get wl0_infra`"  # 0 ad-hoc, 1 managed
if [ "$wifi_mode" = "ap" ];then
	wifi_mode="ap"
fi

if [ "$wifi_mode" = "sta" ];then
	if [ "$wifi_infra" = "1" ];then
        wifi_mode="sta"
	else
	wifi_mode="adhoc"
	fi
fi

uci batch <<EOF
delete wireless.@wifi-iface[0]
add wireless wifi-iface
set wireless.@wifi-iface[0]='wifi-iface'
set wireless.@wifi-iface[0].network='wlan'
set wireless.@wifi-iface[0].device='$wifidevice'
set wireless.@wifi-iface[0].ssid='`nvram get wl0_ssid`'
set wireless.@wifi-iface[0].mode="$wifi_mode"
EOF


wl0_txpwr="`nvram get wl0_txpwr`"
if test -n "$wl0_txpwr";then
	txpower_qdbm="$wl0_txpwr"
	txpower_dbm=$(($txpower_qdbm/4))
	uci set wireless.$wifidevice.txpower="$txpower_dbm"
	uci set wireless.$wifidevice.channel=`nvram get wl0_channel`
fi

if test -n "`nvram get ff_bssid`";then
	uci set wireless.@wifi-iface[0].bssid="`nvram get ff_bssid`"
fi

if [ `nvram get wl0_closed` = "1" ];then
	uci set wireless.@wifi-iface[0].hidden='1'
fi

####wifi settings that can't be set with the current uci config
#wl0_phytype=a/g
#wl0_gmode=1|0|2|4|5|-1 # bg|b|g|turbog|lrs|wlan ausschalten
#wl0_rateset=default|12|all # default|1-2mbps|alle verwenden
#wl0_rate=0|1000000|2000000|5500000|6000000|9000000|11000000|12000000|18000000|24000000|36000000|48000000|54000000 # 0=auto
#wl0_mrate=0|1000000|2000000|5500000|6000000|9000000|11000000|12000000|18000000|24000000|36000000|48000000|54000000 # 0=auto
#wl0_gmode_protection=off|auto # cts schutz
#wl0_frameburst=off|on
#wl0_dtim=[1-255]
#wl0_frag=[256-2346]
#wl0_rts=[0-2347]
#ff_mtu=[68-1500]

#------#
# vlan #
#------#

nvram show |grep vlan[0-9]ports | while read line;do 
	vlan=`echo "$line"| cut -d '=' -f 1 | sed 's/'ports'/''/g'`
	ports=`echo "$line"| cut -d '=' -f 2 `
	uci set network.eth0.$vlan="$ports"
done


#-----#
# LAN #
#-----#

lan_proto="`nvram get lan_proto`"

if [ "$lan_proto" = "disabled" ];then
	uci delete network.lan
	ifdown lan
fi

if [ "$lan_proto" = "dhcp" ];then
uci batch << EOF
set network.lan='interface'
set network.lan.proto='dhcp'
EOF
fi

if [ "$lan_proto" = "static" ] || [ "$lan_proto" = "olsr" ];then
	lan_ipaddr=`nvram get lan_ipaddr`
uci batch << EOF
set network.lan='interface'
set network.lan.proto='static'
set network.lan.ipaddr="$lan_ipaddr"
set network.lan.netmask='`nvram get lan_netmask`'
EOF
	if test -n "`nvram get lan_gateway`";then
		uci set network.lan.gateway=`nvram get lan_gateway`
	fi

	if [ "$lan_proto" = "olsr" ];then
	#	lan_ifname=`uci get network.lan.ifname`
		olsrifs="$olsrifs lan"
	fi
fi

static_routes=`nvram get static_route`

if test -n "$static_routes";then
static_routes="`echo $static_routes |  tr ';' ' '`"
for route in $static_routes; do
	target="`echo $route |cut -d ':' -f 1`"
	netmask="`echo $route |cut -d ':' -f 2`"
	gateway="`echo $route |cut -d ':' -f 3`"
	interface="`echo $route |cut -d ':' -f 5`"
	if [ "$interface" = "br0" ] || [ "$interface" = "vlan0" ];then 
		interface="lan"
	fi
	if [ "$interface" = "eth1" ];then
		interface="wlan"
	else 
		interface="wan";
	fi
uci  batch << EOF
add network route
set network.@route[-1].interface='$interface'
set network.@route[-1].target='$target'
set network.@route[-1].netmask='$netmask'
set network.@route[-1].gateway='$gateway'
EOF
done

	if [ "$lan_proto" = "olsr" ];then
        	olsrifs="$olsrifs lan"
	fi


fi

# LAN DHCP

dhcp_num=`nvram get dhcp_num`
if test -n "$dhcp_num";then
	if [ "$dhcp_num" = "0" ];then
	uci set dhcp.lan.ignore='1'
	else
        uci set dhcp.lan.ignore='0'
	uci set dhcp.lan.start="`nvram get dhcp_start`"
	uci set dhcp.lan.end="$((`nvram get dhcp_start`+`nvram get dhcp_num`))"
	uci set dhcp.lan.leasetime="`nvram get dhcp_lease`"
	uci set dhcp.lan.limit="$dhcp_num"
	fi
fi

#-----#
# WAN #
#-----#

wanifname="`uci get network.wan.ifname`"
wan_proto="`nvram get wan_proto`"

if [ "$wan_proto" = "disabled" ];then
        uci delete network.wan
	ifdown wan
fi

if [ "$wan_proto" = "dhcp" ];then
uci batch << EOF
delete network.wan
set network.wan='interface'
set network.wan.proto='dhcp'
set network.wan.ifname="$wanifname"
EOF
fi

if [ "$wan_proto" = "static" ] || [ "$wan_proto" = "olsr" ];then
uci batch << EOF
set network.wan='interface'
set network.wan.proto='static'
set network.wan.ipaddr="`nvram get wan_ipaddr`"
set network.wan.netmask="`nvram get wan_netmask`"
EOF

	if test -n "`nvram get wan_dns`";then
		for dns in `nvram get wan_dns`;do
		uci set network.wan.dns="$dns"       
		done
	fi

	if test -n "`nvram get wan_gateway`";then
		uci set network.wan.gateway=`nvram get wan_gateway`
	fi
fi

if [ "$wan_proto" = "olsr" ];then
	olsrifs="$olsrifs wan"
fi


if [ "$wan_proto" = "pppoe" ];then
uci batch << EOF
delete network.wan
set network.wan='interface'
set network.wan.proto='pppoe'
set network.wan.ifname="$wanifname"
set network.wan.username="`nvram get ppp_username`"
set network.wan.password="`nvram get ppp_passwd`"
EOF
ppp_demand="`nvram get ppp_demand`"
ppp_idletime="`nvram get ppp_idletime`"
	if [ "$ppp_demand" = "1" ];then
		if [ -n "$ppp_idletime" ];then
			uci set network.wan.demand="$ppp_idletime"
		else
			uci set network.wan.demand="120"
		fi 
	fi
fi
# not set: extended pppoe options: concentrator, interface, device etc

# Domain
wan_domain="`nvram get wan_domain`"

if test -n "$wan_domain";then
	uci set dhcp.@dnsmasq[0].local="/$wan_domain/"
	uci set dhcp.@dnsmasq[0].domain="$wan_domain"
fi

#------#
# OLSR #
#------#

nameserviceid="`uci show|grep nameservice|cut -d '.' -f 1,2`"

if [ "`nvram get ff_nameservice`" = "0" ];then
	uci delete "$nameserviceid"
else
test -n "$wan_domain" && uci set $nameserviceid.suffix=".$wan_domain"

	if test -n "`nvram get ff_service`";then
	        services=`nvram get ff_service`
	       	services="`echo $services | tr ';' ' '`"
	        for service in $services; do
			uci set $nameserviceid.service="$service"
		done
	fi
fi

dyngwid="`uci show|grep dyn_gw|cut -d '.' -f 1,2`"
if [ "`nvram get ff_dyngw`" = "0" ];then
        uci delete "$dyngwid"
fi

for iface in $olsrifs;do
	test -n "`nvram get ff_will`" && uci set olsrd.@olsrd[0].Willingness="`nvram get ff_will`"
	uci add olsrd Interface
	uci set olsrd.@Interface[-1]='Interface'
	uci set olsrd.@Interface[-1].ignore='0'
	uci set olsrd.@Interface[-1].interface="$iface"
	test -n "`nvram get ff_ip4broad`" && uci set olsrd.@Interface[-1].Ip4Broadcast="`nvram get ff_ip4broad`"
	ff_olsrspeed=`nvram get ff_olsrspeed`
	if test -n "$ff_olsrspeed";then
		if [ $ff_olsrspeed -lt 2 ];then $ff_olsrspeed="2";fi
		if [ $ff_olsrspeed -gt 5 ];then $ff_olsrspeed="5";fi
		uci set olsrd.@Interface[-1].HelloInterval=$(( 1 * ff_olsrspeed )).0
		uci set olsrd.@Interface[-1].HelloValidityTime=$(( 25 * ff_olsrspeed )).0
		uci set olsrd.@Interface[-1].TcInterval=$(( 2 * ff_olsrspeed / 4 )).0 
		uci set olsrd.@Interface[-1].TcValidityTime=$(( 100 * ff_olsrspeed )).0
		uci set olsrd.@Interface[-1].MidInterval=$(( 5 * ff_olsrspeed )).0
		uci set olsrd.@Interface[-1].MidValidityTime=$(( 100 * ff_olsrspeed )).0
		uci set olsrd.@Interface[-1].HnaInterval=$(( 5 * ff_olsrspeed )).0
		uci set olsrd.@Interface[-1].HnaValidityTime=$(( 100 * ff_olsrspeed )).0
	fi
	ff_lqmult=`nvram get ff_lqmult`
	if test -n "$ff_lqmult";then
        ff_lqmult=`echo $ff_lqmult | tr ';' ' '`
        for lqmult in $ff_lqmult;do
		lqmult="`echo $lqmult | tr ':' ' '`"
		uci add_list olsrd.@Interface[-1].LinkQualityMult="$lqmult"
	done
fi
done

hna4="`nvram get ff_hna4`"
if test -n "$hna4";then
	hna4="`echo $hna4 | tr ';' ' '`"
	for hna in $hna4;do
	netaddr="`echo $hna|cut -d '/' -f 1`"
	netmask="`echo $hna|cut -d '/' -f 2`"
	uci add olsrd Hna4
	uci set olsrd.@Hna4[-1].netaddr="$netaddr"
        uci set olsrd.@Hna4[-1].netmask="$netmask"
	#get the appropriate zones
	netmask_prefix="`/bin/ipcalc.sh $netaddr $netmask |grep PREFIX|cut -d '=' -f 2`"
	
	if [ "$netaddr"="0.0.0.0" ] && [ "netmask" = "0.0.0.0" ];then
		destzone=`uci show network|grep gateway| grep -v route | cut -d '.' -f 2`
	else	
		ruleid="`uci show network |grep $netaddr | cut -d '.' -f2`"
		if [ -n "$ruleid" ];then
			destzone=`uci get network.$ruleid.interface`
		fi
	fi
	# if we can't find a zone for the route we assume wan
	if [ -z "$destzone" ];then destzone=wan;fi
	if [ ! "`nvram get fw_disable`" = "1" ];then
		uci add firewall rule
		uci set firewall.@rule[-1]=rule
	        uci set firewall.@rule[-1].src=freifunk
		uci set firewall.@rule[-1].dest="$destzone"
		uci set firewall.@rule[-1].dest_ip="$netaddr/$netmask_prefix"
		uci set firewall.@rule[-1].target=ACCEPT
	fi
	done
fi


# currently not set OLSR Options:
# dmz-umleitung: to be done
# ff_qoslev=2 outdated?
# policy routing: not yet possible
# not needed: ff_arprefresh, ff_httpinfo=1
# probably not needed because default: olsr traffic shaping, fisheye, dijkstra

#----------#
# Firewall #
#----------#

#common settings even set when firewall=disabled
#drop olsr packets from ignored stations

firewall_common(){
ff_ign="`nvram get ff_ign`"
if test -n "$ff_ign";then 
	ff_ign="`echo $ff_ign | tr ';' ' '`"
	for ign in $ff_ign;do
		echo "iptables -I INPUT -s $ign -p udp --dport 698 -j DROP" >> /etc/firewall.user
	done
fi

# if firewall is disabled still enable nat when ff_nonat!=1

if [ "`nvram get fw_disable`" = "1" ];then
uci batch << EOF
add firewall defaults
set firewall.@defaults[0].syn_flood=1
set firewall.@defaults[0].input=ACCEPT
set firewall.@defaults[0].output=ACCEPT
set firewall.@defaults[0].forward=ACCEPT
add firewall include
set firewall.@include[-1].path=/etc/firewall.user
add firewall zone
set firewall.@zone[-1]=zone
set firewall.@zone[-1].name=freifunk
set firewall.@zone[-1].input=ACCEPT
set firewall.@zone[-1].output=ACCEPT
set firewall.@zone[-1].forward=ACCEPT
EOF
	if [ "`nvram get ff_nonat`" ];then
		set firewall.@zone[-1].masq=0
	else
		firewall.@zone[-1].masq=1
	fi
fi
}

if [ "`nvram get fw_disable`" = "1" ];then
	echo "" > /etc/config/firewall
	$(firewall_common)
else
	$(firewall_common)

## setup  wlan zone
uci batch <<EOF
add firewall zone
set firewall.@zone[-1]=zone
set firewall.@zone[-1].network="$olsrifs"
set firewall.@zone[-1].input=REJECT
set firewall.@zone[-1].forward=REJECT
set firewall.@zone[-1].name=freifunk
set firewall.@zone[-1].output=ACCEPT
EOF
	if [ "`nvram get ff_nonat`" = "1" ];then
		uci set firewall.@zone[-1].masq=0
	else
		uci set firewall.@zone[-1].masq=1
	fi

	if [ "`nvram get wan_proto`" = "olsr" ];then
		wanzoneid="`uci show firewall |grep 'firewall.@zone\[[0-9]\].name=wan' | cut -d '.' -f2`"
		 uci delete firewall.$wanzoneid
		mtufixid="`uci show firewall |grep 'firewall.@forwarding\[[0-9]\].mtu_fix=1' | cut -d '.' -f2`"
		 uci delete firewall.$mtufixid
	fi

        if [ "`nvram get lan_proto`" = "olsr" ];then 
                lanzoneid="`uci show firewall |grep 'firewall.@zone\[[0-9]\].name=lan' | cut -d '.' -f2`"
                 uci delete firewall.$lanzoneid
        fi

## wlan zone rules 
uci set firewall.@defaults[0].drop_invalid=0

if [ ! "`nvram get lan_proto`" = "olsr" ];then
uci batch <<EOF
add firewall forwarding
set firewall.@forwarding[-1]=forwarding
set firewall.@forwarding[-1].dest=freifunk
set firewall.@forwarding[-1].src=lan
EOF
fi

uci batch <<EOF
add firewall rule
set firewall.@rule[-1]=rule
set firewall.@rule[-1].dest_port=698
set firewall.@rule[-1].proto=udp
set firewall.@rule[-1].target=ACCEPT
set firewall.@rule[-1].src=freifunk
add firewall rule
set firewall.@rule[-1]=rule
set firewall.@rule[-1].dest_port=443
set firewall.@rule[-1].proto=tcp
set firewall.@rule[-1].target=ACCEPT
set firewall.@rule[-1].src=freifunk
add firewall advanced
set firewall.@advanced[-1].tcp_westwood=1
set firewall.@advanced[-1].tcp_ecn=0
set firewall.@advanced[-1].ip_conntrack_max=8192
add firewall rule
set firewall.@rule[-1]=rule
set firewall.@rule[-1].dest_port=80
set firewall.@rule[-1].proto=tcp
set firewall.@rule[-1].target=ACCEPT
set firewall.@rule[-1].src=freifunk
add firewall rule
set firewall.@rule[-1]=rule
set firewall.@rule[-1].target=ACCEPT
set firewall.@rule[-1].src=freifunk
set firewall.@rule[-1].proto=icmp
add firewall rule
set firewall.@rule[-1]=rule
set firewall.@rule[-1].dest_port=22
set firewall.@rule[-1].proto=tcp
set firewall.@rule[-1].target=ACCEPT
set firewall.@rule[-1].src=freifunk
add firewall forwarding
set firewall.@forwarding[-1]=forwarding 
set firewall.@forwarding[-1].dest=freifunk
set firewall.@forwarding[-1].src=freifunk
EOF


# only set wan input rules if wan_proto!=olsr. if it is, then it belongs to the freifunk zone
if [ ! "`nvram get wan_proto`" = "olsr" ];then
	if [ "`nvram get ff_wanssh`" = "1" ];then
uci batch <<EOF
add firewall rule
set firewall.@rule[-1]=rule
set firewall.@rule[-1].dest_port=22
set firewall.@rule[-1].proto=tcp
set firewall.@rule[-1].target=ACCEPT
set firewall.@rule[-1].src=wan
EOF
	fi

	if [ "`nvram get ff_wanhttp`" = "1" ];then
uci batch <<EOF
add firewall rule
set firewall.@rule[-1]=rule
set firewall.@rule[-1].dest_port=80
set firewall.@rule[-1].proto=tcp
set firewall.@rule[-1].target=ACCEPT
set firewall.@rule[-1].src=wan     
EOF
	fi

        if [ "`nvram get ff_wanhttps`" = "1" ];then
uci batch <<EOF
add firewall rule
set firewall.@rule[-1]=rule
set firewall.@rule[-1].dest_port=443
set firewall.@rule[-1].proto=tcp
set firewall.@rule[-1].target=ACCEPT
set firewall.@rule[-1].src=wan
EOF
        fi


	if [ "`nvram get ff_wanicmp`" = "1" ];then
uci batch <<EOF
add firewall rule
set firewall.@rule[-1]=rule
set firewall.@rule[-1].proto=icmp
set firewall.@rule[-1].target=ACCEPT
set firewall.@rule[-1].src=wan
EOF
	fi
fi

fi

uci commit

echo "### Migration finished. Will reboot now. ###"
reboot
}
